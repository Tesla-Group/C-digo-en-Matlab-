function varargout = PM2(varargin)
% PM2 MATLAB code for PM2.fig
%      PM2, by itself, creates a new PM2 or raises the existing
%      singleton*.
%
%      H = PM2 returns the handle to a new PM2 or the handle to
%      the existing singleton*.
%
%      PM2('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in PM2.M with the given input arguments.
%
%      PM2('Property','Value',...) creates a new PM2 or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before PM2_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to PM2_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help PM2

% Last Modified by GUIDE v2.5 06-Jul-2020 20:58:42

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @PM2_OpeningFcn, ...
                   'gui_OutputFcn',  @PM2_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before PM2 is made visible.
function PM2_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to PM2 (see VARARGIN)
%% Codigo para el recuadro geométrico izquierdo
imagen=imread('fondo13.jpg');
image(imagen,'Parent',handles.axes2);
set(handles.axes2,'XTick',[],'YTick',[]);
box on;
grid on;

%%%Código para el diseño de los botones(flechas)
[a,map]=imread('CASA3.jpg');
[r,c,d]=size(a);
x=ceil(r/140);
y=ceil(c/160);
g=a(1:x:end,1:y:end,:);
g(g==300)=5.5*300;
set(handles.Pantalla_Principal,'CData',g);

[a,map]=imread('FLECHADERE.jpg');
[r,c,d]=size(a);
x=ceil(r/125);
y=ceil(c/130);
g=a(1:x:end,1:y:end,:);
g(g==300)=5.5*300;
set(handles.BOTON_X1,'CData',g);
% 
[a,map]=imread('FLECHAIZ.jpg');
[r,c,d]=size(a);
x=ceil(r/110);
y=ceil(c/130);
g=a(1:x:end,1:y:end,:);
g(g==300)=5.5*300;
set(handles.BOTON_X2,'CData',g);

[a,map]=imread('FLECHADERE.jpg');
[r,c,d]=size(a);
x=ceil(r/125);
y=ceil(c/130);
g=a(1:x:end,1:y:end,:);
g(g==300)=5.5*300;
set(handles.BOTON_Y1,'CData',g);
% 
[a,map]=imread('FLECHAIZ.jpg');
[r,c,d]=size(a);
x=ceil(r/110);
y=ceil(c/130);
g=a(1:x:end,1:y:end,:);
g(g==300)=5.5*300;
set(handles.BOTON_Y2,'CData',g);

[a,map]=imread('FLECHADERE.jpg');
[r,c,d]=size(a);
x=ceil(r/125);
y=ceil(c/130);
g=a(1:x:end,1:y:end,:);
g(g==300)=5.5*300;
set(handles.BOTON_Z1,'CData',g);
% 
[a,map]=imread('FLECHAIZ.jpg');
[r,c,d]=size(a);
x=ceil(r/110);
y=ceil(c/130);
g=a(1:x:end,1:y:end,:);
g(g==300)=5.5*300;
set(handles.BOTON_Z2,'CData',g);

%%% Variables globales  
global C_x C_y C_z Ax Ay Az
C_x = 0;    Ax=0;
C_y = 0;    Ay=0;
C_z = 0;    Az=0;

% Choose default command line output for PM2
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes PM2 wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = PM2_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on button press in BOTON_X2.
function BOTON_X2_Callback(hObject, eventdata, handles)
cla reset

global C_x Az Ay Ax
Pasos = str2double(get(handles.count, 'String'));
limit=C_x + Pasos;
if limit<1445
    C_x = C_x + Pasos
     handles.contador_x.String = num2str(floor(C_x)); 
    pasosAenviar1 = Pasos;        
        %% Construir el paquete para enviar a Arduino, concatenado automático con el comando strcat
    paquete = strcat(int2str(pasosAenviar1),',','0',',','0',',')
        %% Esperar respuesta de Arduino
    Ax=steps2angle(C_x);
    coordenadas=C_Directa(Az,Ay,Ax);
    T1=Az;
    T2=Ay;
    T3=Ax;
    prueba_directa;
    FINAL=m04(:,4);
    handles.A_x.String = num2str(floor(FINAL(1))); 
    handles.A_y.String = num2str(floor(FINAL(2)));
    handles.A_z.String = num2str(floor(FINAL(3))); 
    
    respuesta = comAM(paquete)
else
    errordlg('Valor Fuera del Área de Trabajo','Control Manual');
end

shading flat;
 rotate3d on %permite girar la sup
 xlabel('Eje X'),ylabel('Eje Y'),zlabel('Eje Z');

% --- Executes on button press in BOTON_X1.
function BOTON_X1_Callback(hObject, eventdata, handles)
cla reset
global C_x Az Ay Ax
Pasos = str2double(get(handles.count, 'String'));
Pasos=Pasos*-1;
limit=C_x + Pasos;
if abs(limit)<1445
    C_x = C_x + Pasos
  handles.contador_x.String = num2str(floor(C_x));
    pasosAenviar1 = Pasos;  
    
        %% Construir el paquete para enviar a Arduino, concatenado automático con el comando strcat
    paquete = strcat(int2str(pasosAenviar1),',','0',',','0')
        %% Esperar respuesta de Arduino
    
    Ax=steps2angle(C_x);
    coordenadas=C_Directa(Az,Ay,Ax);
    T1=Az;
    T2=Ay;
    T3=Ax;
    prueba_directa;
    FINAL=m04(:,4);
    handles.A_x.String = num2str(floor(FINAL(1))); 
    handles.A_y.String = num2str(floor(FINAL(2)));
    handles.A_z.String = num2str(floor(FINAL(3))); 
    
respuesta = comAM(paquete)
else
    errordlg('Valor Fuera del Área de Trabajo','Control Manual');
end
shading flat;
 rotate3d on %permite girar la sup
 xlabel('Eje X'),ylabel('Eje Y'),zlabel('Eje Z');


% --- Executes on button press in Pantalla_Principal.
function Pantalla_Principal_Callback(hObject, eventdata, handles)
close(PM2)
Pantalla_Principal1


% --- Executes on button press in boton_Home.
function boton_Home_Callback(hObject, eventdata, handles)
global C_z C_x C_y Az Ay Ax
cla reset
pasosx=C_x*(-1)
pasosy=C_y*(-1)
pasosz=C_z*(-1)
paquete = strcat(int2str(pasosx),',',int2str(pasosy),',',int2str(pasosz),',')
C_x=0;C_y=0;C_z=0;
handles.contador_x.String = num2str(floor(C_x));
handles.contador_y.String = num2str(floor(C_y));
handles.contador_z.String = num2str(floor(C_z));
Ax=0;Ay=0;Az=0;
T1=Az;T2=Ay;T3=Ax;
prueba_directa
FINAL = m04(:,4)
handles.A_x.String = num2str(floor(FINAL(1))); 
handles.A_y.String = num2str(floor(FINAL(2)));
handles.A_z.String = num2str(floor(FINAL(3))); 
respuesta = comAM(paquete)

% --- Executes on button press in boton_borrar.
function boton_borrar_Callback(hObject, eventdata, handles)
% hObject    handle to boton_borrar (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in BOTON_Y2.
function BOTON_Y2_Callback(hObject, eventdata, handles)
cla reset

global C_y Az Ay Ax
Pasos = str2double(get(handles.count, 'String'));
limit=C_y + Pasos;
if limit<1445
    C_y = C_y + Pasos
    handles.contador_y.String = num2str(floor(C_y));
    pasosAenviar1 = Pasos;        
        %% Construir el paquete para enviar a Arduino, concatenado automático con el comando strcat
    paquete = strcat('0',',',int2str(pasosAenviar1),',','0',',')
        %% Esperar respuesta de Arduino
    Ay=steps2angle(C_y);
    coordenadas=C_Directa(Ax,Ay,Az)
    T1=Ax
    T2=Ay
    T3=Az
    prueba_directa
    FINAL=m04(:,4)
    handles.A_x.String = num2str(floor(FINAL(1))); 
    handles.A_y.String = num2str(floor(FINAL(2)));
    handles.A_z.String = num2str(floor(FINAL(3))); 
    respuesta = comAM(paquete)
else
    errordlg('Valor Fuera del Área de Trabajo','Control Manual');
end
shading flat;
 rotate3d on %permite girar la sup
 xlabel('Eje X'),ylabel('Eje Y'),zlabel('Eje Z')

% --- Executes on button press in BOTON_Y1.
function BOTON_Y1_Callback(hObject, eventdata, handles)
cla reset
 
global C_y Az Ay Ax
Pasos = str2double(get(handles.count, 'String'));
Pasos=Pasos*-1;
limit=C_y + Pasos;
if abs(limit)<1445
    C_y = C_y + Pasos
    handles.contador_y.String = num2str(floor(C_y));
    pasosAenviar1 = Pasos;        
        %% Construir el paquete para enviar a Arduino, concatenado automático con el comando strcat
    paquete = strcat('0',',',int2str(pasosAenviar1),',','0',',')
        %% Esperar respuesta de Arduino
    Ay=steps2angle(C_y);
    coordenadas=C_Directa(Ax,Ay,Az)
    T1=Ax
    T2=Ay
    T3=Az
    prueba_directa
    FINAL=m04(:,4)
    handles.A_x.String = num2str(floor(FINAL(1))); 
    handles.A_y.String = num2str(floor(FINAL(2)));
    handles.A_z.String = num2str(floor(FINAL(3))); 
respuesta = comAM(paquete)
else
    errordlg('Valor Fuera del Área de Trabajo','Control Manual');
end
shading flat;
 rotate3d on %permite girar la sup
 xlabel('Eje X'),ylabel('Eje Y'),zlabel('Eje Z')

% --- Executes on button press in BOTON_Z1.
function BOTON_Z1_Callback(hObject, eventdata, handles)
cla reset

global C_z Az Ay Ax
Pasos = str2double(get(handles.count, 'String'));
Pasos=Pasos*-1;
limit=C_z + Pasos;
if abs(limit)<1445
    C_z = C_z + Pasos
     handles.contador_z.String = num2str(floor(C_z));
    pasosAenviar1 = Pasos;        
        %% Construir el paquete para enviar a Arduino, concatenado automático con el comando strcat
    paquete = strcat('0',',','0',',',int2str(pasosAenviar1),',')
        %% Esperar respuesta de Arduino
    Az=steps2angle(C_z);
    coordenadas=C_Directa(Az,Ay,Ax);
    T1=Az;
    T2=Ay;
    T3=Ax;
    prueba_directa;
    FINAL=m04(:,4);
    handles.A_x.String = num2str(floor(FINAL(1))); 
    handles.A_y.String = num2str(floor(FINAL(2)));
    handles.A_z.String = num2str(floor(FINAL(3))); 
respuesta = comAM(paquete);
else
    errordlg('Valor Fuera del Área de Trabajo','Control Manual');
end
shading flat;
 rotate3d on %permite girar la sup
 xlabel('Eje X'),ylabel('Eje Y'),zlabel('Eje Z');

% --- Executes on button press in BOTON_Z2.
function BOTON_Z2_Callback(hObject, eventdata, handles)
cla reset

global C_z Az Ay Ax
Pasos = str2double(get(handles.count, 'String'));
limit=C_z + Pasos;
if limit<1445
    C_z = C_z + Pasos
    handles.contador_z.String = num2str(floor(C_z));
    pasosAenviar1 = Pasos;        
        %% Construir el paquete para enviar a Arduino, concatenado automático con el comando strcat
    paquete = strcat('0',',','0',',',int2str(pasosAenviar1),',')
        %% Esperar respuesta de Arduino
    Az=steps2angle(C_z);
    coordenadas=C_Directa(Az,Ay,Ax);
    T1=Az;T2=Ay;T3=Ax;
    prueba_directa
    FINAL = m04(:,4)
    handles.A_x.String = num2str(floor(FINAL(1))); 
    handles.A_y.String = num2str(floor(FINAL(2)));
    handles.A_z.String = num2str(floor(FINAL(3))); 
    respuesta = comAM(paquete)
else
    errordlg('Valor Fuera del Área de Trabajo','Control Manual');
end

shading flat;
 rotate3d on %permite girar la sup
 xlabel('Eje X'),ylabel('Eje Y'),zlabel('Eje Z');


function count_Callback(hObject, eventdata, handles)
% hObject    handle to count (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of count as text
%        str2double(get(hObject,'String')) returns contents of count as a double


% --- Executes during object creation, after setting all properties.
function count_CreateFcn(hObject, eventdata, handles)
% hObject    handle to count (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit2_Callback(hObject, eventdata, handles)
% hObject    handle to edit2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit2 as text
%        str2double(get(hObject,'String')) returns contents of edit2 as a double


% --- Executes during object creation, after setting all properties.
function edit2_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
