//Definimos las salidas de pulso, dirección y habilitación
const int X_STEP_PIN = 54;
const int X_DIR_PIN = 55;
const int X_ENABLE_PIN = 38;
const int Y_STEP_PIN = 60;
const int Y_DIR_PIN = 61;
const int Y_ENABLE_PIN = 56;
const int Z_STEP_PIN = 46;
const int Z_DIR_PIN = 48;
const int Z_ENABLE_PIN = 62;

// Creamos variables auxiliares para la comunicación entre Matlab y Arduino
int datosMatlab[3];

// Creamos variables auxiliares para el movimiento de los motores
int pasosAmover1;
int pasosAmover2;
int pasosAmover3;
int pasosMovidos1;
int pasosMovidos2;
int pasosMovidos3;
int periodo1;
int periodo2;
int periodo3;

// Creamos la variable que inicia el tratamiento de los datos, después de recibirlos
bool t = false;

void setup()
{
  Serial.begin(9600);
  // Configuramos las salidas de pulso, dirección y habilitación
  pinMode(X_STEP_PIN , OUTPUT);
  pinMode(X_DIR_PIN , OUTPUT);
  pinMode(X_ENABLE_PIN , OUTPUT);

  pinMode(Y_STEP_PIN , OUTPUT);
  pinMode(Y_DIR_PIN , OUTPUT);
  pinMode(Y_ENABLE_PIN , OUTPUT);

  pinMode(Z_STEP_PIN , OUTPUT);
  pinMode(Z_DIR_PIN , OUTPUT);
  pinMode(Z_ENABLE_PIN , OUTPUT);
  // Dejamos la hablitación en "siempre habilitado"
  digitalWrite(X_ENABLE_PIN , LOW);
  digitalWrite(Y_ENABLE_PIN , LOW);
  digitalWrite(Z_ENABLE_PIN , LOW);
  // Iniciamos el conteo de pasos movidos en cero
  pasosMovidos1 = 0;
  pasosMovidos2 = 0;
  pasosMovidos3 = 0;
}

void loop ()
{ // Si se están recibiendo datos de Matlab, esperar
  if (Serial.available() > 0) delay(10);
  // Cuando la señal de movimiento se anuncie, adquirir los datos de Matlab que almacenamos
  if (t == true)  
  { pasosAmover1 = datosMatlab[0];
    pasosAmover2 = datosMatlab[1];
    pasosAmover3 = datosMatlab[2];
   // periodo1 = datosMatlab[3];
   // periodo2 = datosMatlab[4];
    //periodo3 = datosMatlab[5];
    // Comprobamos si hay que avanzar o retroceder pasos para controlar la dirección de giro
    if (pasosAmover1 >= 0)
    { digitalWrite(X_DIR_PIN, HIGH);
    }
    if (pasosAmover1 < 0)
    { digitalWrite(X_DIR_PIN, LOW);
    }
    if (pasosAmover2 >= 0)
    { digitalWrite(Y_DIR_PIN, HIGH);
    }
    if (pasosAmover2 < 0)
    { digitalWrite(Y_DIR_PIN, LOW);
    }
    if (pasosAmover3 >= 0)
    { digitalWrite(Z_DIR_PIN, HIGH);
    }
    if (pasosAmover3 < 0)
    { digitalWrite(Z_DIR_PIN, LOW);
    }
    // Una vez determinadas las direcciones de giro, nos ponemos a avanzar el número de pasos
    //    requerido
    while ((pasosMovidos1 < abs(pasosAmover1)) && (pasosMovidos2 < abs(pasosAmover2)) && (pasosMovidos3 < abs(pasosAmover3)))
    { // Mientras los tres motores no se hayan movido el número de pasos que deben, se ejecutará
      //  esta sección
      if (pasosMovidos1 < abs(pasosAmover1))
      { digitalWrite(X_STEP_PIN, HIGH);
        delay(1);
        digitalWrite(X_STEP_PIN, LOW);
        delay(1);
        pasosMovidos1 = pasosMovidos1 + 1;
      }
      if (pasosMovidos2 < abs(pasosAmover2))
      { digitalWrite(X_STEP_PIN, HIGH);
        delay(1);
        digitalWrite(X_STEP_PIN, LOW);
        delay(1);
        pasosMovidos2 = pasosMovidos2 + 1;
      }
      if (pasosMovidos3 < abs(pasosAmover3))
      { digitalWrite(X_STEP_PIN, HIGH);
        delay(1);
        digitalWrite(X_STEP_PIN, LOW);
        delay(1);
        pasosMovidos3 = pasosMovidos3 + 1;
      }
    }
    // Apagamos la señal de movimiento y reiniciamos los contadores de pasos
   
    // Enviamos la respuesta de movimiento
    Serial.println("Hemos llegado al destino%");
    pasosAmover1 = 0;
    pasosAmover2 = 0;
    pasosAmover3 = 0;
    pasosMovidos1 = 0;
    pasosMovidos2 = 0;
    pasosMovidos3 = 0;
    t = false;
    delay(1);
  }
  // Eliminamos los datos del búfer
  Serial.flush();
}

// Función de descomposición del paquete recibido desde Matlab
void serialEvent()
{ // Creamos una variable auxiliar para representar el signo. Esto nos ayudará a identificar
  //  números negativos. También iniciamos el dato mayor en cero
  int signo = 1;
  // Creamos el índice "i" de exploración del paquete
  int i = 0;
  // Creamos el acumulador de valores en forma de cadena (luego lo convertiremos a número)
  String valor = "0";
  while (Serial.available())
  { // Recibimos el primer caracter del paquete convertido a caracter con "(char)"
    char dato = (char)Serial.read();
    if (dato == ',')
    { // Si el dato es el separador de palabra (la comilla simple), convertimos el
      //  valor acumulado a número entero con el método toInt(), lo multiplicamos por el signo y avanzamos el
      //  índice para guardar el siguiente dato en el siguiente espacio de datosMatlab.
      //  Al mismo tiempo, comparamos el mayor dato con el actual dato mayor para actualizarlo
      datosMatlab[i] = String(valor).toInt();
      datosMatlab[i] = datosMatlab[i] * signo;
      valor = "0";
      signo = 1;
      i = i + 1;
      
    }
    else {
      // Si no es el separador, identificamos el símbolo del signo negativo para modificarlo
      if (dato == '-')
      { signo = -1;
      }
      // Si tampoco es el signo, concatenamos el dato al final del valor acumulado, ya que
      //  en ese orden estamos recibiendo los datos
      else
      { valor += dato;
      }
    }
    delay(1);
  }
  // Una vez recibidos todos los datos, reiniciamos el índice para prepararlo para los siguientes
  //  paquetes que vamos a recibir y enviamos la señal de que Arduino controle los motores
  i = 0;
  t = true;
}
